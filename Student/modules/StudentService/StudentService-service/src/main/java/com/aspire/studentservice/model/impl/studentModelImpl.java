/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.aspire.studentservice.model.impl;

import com.aspire.studentservice.model.student;
import com.aspire.studentservice.model.studentModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the student service. Represents a row in the &quot;student_table&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>studentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link studentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see studentImpl
 * @generated
 */
public class studentModelImpl
	extends BaseModelImpl<student> implements studentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the <code>student</code> interface instead.
	 */
	public static final String TABLE_NAME = "student_table";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"enrollmentno", Types.VARCHAR},
		{"fname", Types.VARCHAR}, {"lname", Types.VARCHAR},
		{"contactno", Types.VARCHAR}, {"city", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("enrollmentno", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactno", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table student_table (id_ LONG not null primary key,enrollmentno VARCHAR(75) null,fname VARCHAR(75) null,lname VARCHAR(75) null,contactno VARCHAR(75) null,city VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table student_table";

	public static final String ORDER_BY_JPQL = " ORDER BY student.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY student_table.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public studentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return student.class;
	}

	@Override
	public String getModelClassName() {
		return student.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<student, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((student)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<student, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<student, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(student)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<student, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<student, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<student, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<student, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<student, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<student, Object>>();
		Map<String, BiConsumer<student, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<student, ?>>();

		attributeGetterFunctions.put("id", student::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<student, Long>)student::setId);
		attributeGetterFunctions.put("enrollmentno", student::getEnrollmentno);
		attributeSetterBiConsumers.put(
			"enrollmentno",
			(BiConsumer<student, String>)student::setEnrollmentno);
		attributeGetterFunctions.put("fname", student::getFname);
		attributeSetterBiConsumers.put(
			"fname", (BiConsumer<student, String>)student::setFname);
		attributeGetterFunctions.put("lname", student::getLname);
		attributeSetterBiConsumers.put(
			"lname", (BiConsumer<student, String>)student::setLname);
		attributeGetterFunctions.put("contactno", student::getContactno);
		attributeSetterBiConsumers.put(
			"contactno", (BiConsumer<student, String>)student::setContactno);
		attributeGetterFunctions.put("city", student::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<student, String>)student::setCity);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_id = id;
	}

	@Override
	public String getEnrollmentno() {
		if (_enrollmentno == null) {
			return "";
		}
		else {
			return _enrollmentno;
		}
	}

	@Override
	public void setEnrollmentno(String enrollmentno) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enrollmentno = enrollmentno;
	}

	@Override
	public String getFname() {
		if (_fname == null) {
			return "";
		}
		else {
			return _fname;
		}
	}

	@Override
	public void setFname(String fname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fname = fname;
	}

	@Override
	public String getLname() {
		if (_lname == null) {
			return "";
		}
		else {
			return _lname;
		}
	}

	@Override
	public void setLname(String lname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lname = lname;
	}

	@Override
	public String getContactno() {
		if (_contactno == null) {
			return "";
		}
		else {
			return _contactno;
		}
	}

	@Override
	public void setContactno(String contactno) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactno = contactno;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, student.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public student toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, student>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		studentImpl studentImpl = new studentImpl();

		studentImpl.setId(getId());
		studentImpl.setEnrollmentno(getEnrollmentno());
		studentImpl.setFname(getFname());
		studentImpl.setLname(getLname());
		studentImpl.setContactno(getContactno());
		studentImpl.setCity(getCity());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	@Override
	public student cloneWithOriginalValues() {
		studentImpl studentImpl = new studentImpl();

		studentImpl.setId(this.<Long>getColumnOriginalValue("id_"));
		studentImpl.setEnrollmentno(
			this.<String>getColumnOriginalValue("enrollmentno"));
		studentImpl.setFname(this.<String>getColumnOriginalValue("fname"));
		studentImpl.setLname(this.<String>getColumnOriginalValue("lname"));
		studentImpl.setContactno(
			this.<String>getColumnOriginalValue("contactno"));
		studentImpl.setCity(this.<String>getColumnOriginalValue("city"));

		return studentImpl;
	}

	@Override
	public int compareTo(student student) {
		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof student)) {
			return false;
		}

		student student = (student)object;

		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<student> toCacheModel() {
		studentCacheModel studentCacheModel = new studentCacheModel();

		studentCacheModel.id = getId();

		studentCacheModel.enrollmentno = getEnrollmentno();

		String enrollmentno = studentCacheModel.enrollmentno;

		if ((enrollmentno != null) && (enrollmentno.length() == 0)) {
			studentCacheModel.enrollmentno = null;
		}

		studentCacheModel.fname = getFname();

		String fname = studentCacheModel.fname;

		if ((fname != null) && (fname.length() == 0)) {
			studentCacheModel.fname = null;
		}

		studentCacheModel.lname = getLname();

		String lname = studentCacheModel.lname;

		if ((lname != null) && (lname.length() == 0)) {
			studentCacheModel.lname = null;
		}

		studentCacheModel.contactno = getContactno();

		String contactno = studentCacheModel.contactno;

		if ((contactno != null) && (contactno.length() == 0)) {
			studentCacheModel.contactno = null;
		}

		studentCacheModel.city = getCity();

		String city = studentCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			studentCacheModel.city = null;
		}

		return studentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<student, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((student)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<student, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((student)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, student>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					student.class, ModelWrapper.class);

	}

	private long _id;
	private String _enrollmentno;
	private String _fname;
	private String _lname;
	private String _contactno;
	private String _city;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<student, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((student)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("id_", _id);
		_columnOriginalValues.put("enrollmentno", _enrollmentno);
		_columnOriginalValues.put("fname", _fname);
		_columnOriginalValues.put("lname", _lname);
		_columnOriginalValues.put("contactno", _contactno);
		_columnOriginalValues.put("city", _city);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("id_", "id");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("id_", 1L);

		columnBitmasks.put("enrollmentno", 2L);

		columnBitmasks.put("fname", 4L);

		columnBitmasks.put("lname", 8L);

		columnBitmasks.put("contactno", 16L);

		columnBitmasks.put("city", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private student _escapedModel;

}